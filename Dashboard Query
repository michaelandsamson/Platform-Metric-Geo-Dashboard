WITH sessions AS (
	SELECT
		*,
		ROW_NUMBER ( ) OVER ( PARTITION BY session_id ORDER BY message_id DESC, from_cornice DESC, created_at DESC, processed_at DESC ) AS rn 
	FROM
		styx_production.sessions 
	WHERE
		DATE >= '2020-09-01' 
	)
	--gotta get rid of those stale sessions brah
SELECT
sessions.region,
count(case when placements.ctv = 't' and interactions.name = 'initial' then 1 end) as ctv_initials,
count(case when placements.mobile = 1 and interactions.name = 'initial' then 1 end) as mobile_initials,
count(case when placements.desktop = 1 and interactions.name = 'initial' then 1 end) as desktop_initials,
count(case when interactions.name = 'video_completed' and placements.desktop = 1 then 1 end)::FLOAT/NULLIF(count(case when interactions.name = 'video_started' and placements.desktop = 1 then 1 end),0) as desktop_vcr,
count(case when interactions.name = 'video_completed' and placements.mobile = 1 then 1 end)::FLOAT/NULLIF(count(case when interactions.name = 'video_started' and placements.mobile = 1 then 1 end),0) as mobile_vcr,
count(case when interactions.name = 'video_completed' and placements.ctv = 1 then 1 end)::FLOAT/NULLIF(count(case when interactions.name = 'video_started' and placements.ctv= 1 then 1 end),0) as ctv_vcr
from styx_production.interactions
INNER JOIN sessions ON sessions.session_id = interactions.session_id
AND interactions.created_at <= sessions.created_at + INTERVAL '48 hours' -- removing duplicates
AND sessions.rn = 1 
LEFT JOIN
facelift.placements on placements.identifier_hash = sessions.placement_hash
where interactions.date >= '2020-09-01'
AND country_code = 'US'
group by 1
